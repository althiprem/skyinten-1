import React, { useEffect, useState } from "react";
import { FaGraduationCap, FaCode, FaCertificate, FaStar } from "react-icons/fa";
import "../../styles/components/accomplishments.css";

const Achievements = () => {
  const [achievements, setAchievements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [collapsedCategories, setCollapsedCategories] = useState({});

  useEffect(() => {
    const sampleAchievements = [
      {
        id: 1,
        title: "First Course Completion",
        description: "Successfully completed your first course.",
        category: "Learning Milestones",
        icon: <FaGraduationCap />,
      },
      {
        id: 2,
        title: "Coding Master",
        description: "Solved 50 coding challenges on the platform.",
        category: "Skill Mastery",
        icon: <FaCode />,
      },
      {
        id: 3,
        title: "React Certified",
        description: "Earned a certificate in React Mastery.",
        category: "Certifications",
        icon: <FaCertificate />,
      },
      {
        id: 4,
        title: "Five-Star Student",
        description: "Achieved a 5-star rating on your project.",
        category: "Community",
        icon: <FaStar />,
      },
      {
        id: 5,
        title: "Learning Streak (7 days)",
        description: "Maintained a 7-day consecutive learning streak.",
        category: "Learning Milestones",
        icon: <FaStar />,
      },
      {
        id: 6,
        title: "Hackathon Participant",
        description: "Participated in your first hackathon.",
        category: "Skill Mastery",
        icon: <FaCode />,
      },
    ];

    setTimeout(() => {
      setAchievements(sampleAchievements);
      setLoading(false);
    }, 1000);
  }, []);

  const grouped = achievements.reduce((acc, item) => {
    const category = item.category || "Uncategorized";
    if (!acc[category]) acc[category] = [];
    acc[category].push(item);
    return acc;
  }, {});

  const toggleCategory = (category) => {
    setCollapsedCategories((prev) => ({
      ...prev,
      [category]: !prev[category],
    }));
  };

  const AchievementCard = ({ icon, title, description }) => (
    <div className="achievement-card">
      <div className="achievement-card__icon">{icon}</div>
      <div className="achievement-card__info">
        <h3 className="achievement-card__title">{title}</h3>
        <p className="achievement-card__desc">{description}</p>
      </div>
    </div>
  );

  if (loading) {
    return (
      <div className="accomplishments accomplishments--loading">
        Loading achievements...
      </div>
    );
  }

  if (error) {
    return (
      <div className="accomplishments accomplishments--error">{error}</div>
    );
  }

  return (
    <div className="accomplishments">
      <h1 className="accomplishments__header">My Achievements</h1>
      {Object.keys(grouped).length > 0 ? (
        Object.keys(grouped).map((category) => (
          <div key={category} className="accomplishments__category">
            <div
              className="accomplishments__category-header"
              onClick={() => toggleCategory(category)}
            >
              <h3>{category}</h3>
              <span
                className={`accomplishments__toggle-icon ${
                  collapsedCategories[category] ? "collapsed" : "expanded"
                }`}
              >
                +
              </span>
            </div>
            {!collapsedCategories[category] && (
              <div className="accomplishments__grid">
                {grouped[category].map((item) => (
                  <AchievementCard
                    key={item.id}
                    icon={item.icon}
                    title={item.title}
                    description={item.description}
                  />
                ))}
              </div>
            )}
          </div>
        ))
      ) : (
        <div className="accomplishments__empty">
          <p>You haven't unlocked any achievements yet. Keep learning!</p>
        </div>
      )}
    </div>
  );
};

export default Achievements;
import React from "react";
import { FaPlayCircle, FaCheckCircle, FaLock } from "react-icons/fa";
import "../../styles/components/dashcoursecard.css";

const CourseCard = ({ course, onResume }) => {
  const isCompleted = course.progress === 100;

  return (
    <div className="course-card">
      <div className="course-card__image-container">
        <img
          src={course.thumbnail}
          alt={course.title}
          className="course-card__image"
        />
        <div className="course-card__overlay">
          <button
            className="course-card__play-btn"
            onClick={() => onResume(course.id)}
          >
            <FaPlayCircle />
          </button>
        </div>
      </div>
      <div className="course-card__content">
        <h4 className="course-card__title">{course.title}</h4>
        <div className="course-card__progress">
          <div
            className="course-card__progress-bar"
            style={{ width: `${course.progress}%` }}
          />
        </div>
        <div className="course-card__meta">
          <span className="course-card__progress-text">
            {isCompleted ? (
              <>
                <FaCheckCircle className="icon-completed" />
                Completed
              </>
            ) : (
              `${course.progress}% Complete`
            )}
          </span>
          <button
            className="course-card__action-btn"
            onClick={() => onResume(course.id)}
          >
            {isCompleted
              ? "Review"
              : course.progress > 0
              ? "Continue"
              : "Start"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default CourseCard;
import React, { useState } from "react";
import { FaSearch } from "react-icons/fa";
import CourseCard from "./CourseCard";
import "../../styles/components/dashcoursesGrid.css";

const CoursesGrid = ({ purchasedCourses = [], onNavigate }) => {
  const [searchTerm, setSearchTerm] = useState("");

  const filteredCourses = purchasedCourses.filter((course) =>
    course.title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="courses-panel">
      <div className="courses-panel__header">
        <h1 className="courses-panel__title">My Courses</h1>
        <div className="courses-panel__search-bar">
          <FaSearch className="search-icon" />
          <input
            type="text"
            placeholder="Search my courses..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
      </div>

      {filteredCourses.length > 0 ? (
        <div className="courses-panel__grid">
          {filteredCourses.map((course) => (
            <CourseCard
              key={course.id}
              course={course}
              onResume={() => onNavigate("courses")}
            />
          ))}
        </div>
      ) : (
        <div className="courses-panel__empty">
          <p>
            {purchasedCourses.length > 0
              ? "No courses found matching your search."
              : "You haven’t purchased any courses yet."}
          </p>
          <button
            className="btn btn--primary"
            onClick={() => onNavigate("explore")}
          >
            Explore Courses
          </button>
        </div>
      )}
    </div>
  );
};

export default CoursesGrid;
import React, { useMemo } from "react";
import {
  FaArrowRight,
  FaClock,
  FaUsers,
  FaTrophy,
  FaGraduationCap,
} from "react-icons/fa";
import CourseCard from "./CourseCard";
import "../../styles/components/dashhome.css";

const DashHome = ({
  userName,
  onNavigate,
  purchasedCourses = [],
  hackathon,
}) => {
  const { enrolled, inProgress, completed } = useMemo(() => {
    const enrolledCount = purchasedCourses.length;
    const inProgressCount = purchasedCourses.filter(
      (c) => c.progress > 0 && c.progress < 100
    ).length;
    const completedCount = purchasedCourses.filter(
      (c) => c.progress === 100
    ).length;
    return {
      enrolled: enrolledCount,
      inProgress: inProgressCount,
      completed: completedCount,
    };
  }, [purchasedCourses]);

  const recentCourses = useMemo(
    () => purchasedCourses.slice(0, 3),
    [purchasedCourses]
  );

  const hack = hackathon || {
    title: "AI Builders Hackathon",
    date: "Sep 14, 2025",
    time: "10:00 AM IST",
    theme: "Building Assistive Learning Tools",
    teamSize: "1–4",
    prize: "₹50,000",
    banner: "/images/hackathons/ai-builders-banner.jpg",
  };

  return (
    <div className="dash-home">
      <div className="dash-home__main">
        <div className="dash-home__greeting">
          <h1 className="dash-home__greeting-title">Hello, {userName}!</h1>
          <p className="dash-home__greeting-subtitle">
            Your learning journey continues. Let's make today count.
          </p>
        </div>

        <div className="dash-home__stats">
          <div className="stat-card">
            <FaGraduationCap className="stat-card__icon" />
            <div className="stat-card__info">
              <p className="stat-card__label">Courses Enrolled</p>
              <h2 className="stat-card__value">{enrolled}</h2>
            </div>
          </div>
          <div className="stat-card">
            <FaTrophy className="stat-card__icon" />
            <div className="stat-card__info">
              <p className="stat-card__label">Achievements</p>
              <h2 className="stat-card__value">5</h2>
            </div>
          </div>
          <div className="stat-card">
            <FaClock className="stat-card__icon" />
            <div className="stat-card__info">
              <p className="stat-card__label">Current Streak</p>
              <h2 className="stat-card__value">7 Days</h2>
            </div>
          </div>
        </div>

        <div className="dash-home__section">
          <div className="section-header">
            <h2 className="section-header__title">Recent Courses</h2>
            <button
              className="section-header__link"
              onClick={() => onNavigate("courses")}
            >
              View all courses <FaArrowRight />
            </button>
          </div>
          <div className="courses-grid">
            {recentCourses.length > 0 ? (
              recentCourses.map((course) => (
                <CourseCard
                  key={course.id}
                  course={course}
                  onResume={() => onNavigate("courses")}
                />
              ))
            ) : (
              <p className="empty-state">
                No courses in progress. Explore new ones!
              </p>
            )}
          </div>
        </div>

        <div className="dash-home__section">
          <div className="section-header">
            <h2 className="section-header__title">Upcoming Hackathon</h2>
            <button
              className="section-header__link"
              onClick={() => onNavigate("explore")}
            >
              Learn more <FaArrowRight />
            </button>
          </div>
          <div className="hackathon-card">
            <div className="hackathon-card__media">
              {hack.banner && (
                <img
                  src={hack.banner}
                  alt={hack.title}
                  className="hackathon-card__image"
                />
              )}
            </div>
            <div className="hackathon-card__content">
              <h3 className="hackathon-card__title">{hack.title}</h3>
              <p className="hackathon-card__desc">
                Ship something bold. Collaborate, prototype, and demo in 24
                hours.
              </p>
              <div className="hackathon-card__meta">
                <span>
                  <FaClock /> {hack.date} • {hack.time}
                </span>
                <span>
                  <FaUsers /> Teams: {hack.teamSize}
                </span>
                <span>
                  <FaTrophy /> Top prize: {hack.prize}
                </span>
              </div>
              <div className="hackathon-card__actions">
                <button
                  className="btn btn--primary"
                  onClick={() => onNavigate("explore")}
                >
                  Join now
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DashHome;
import React, { useState } from "react";
import "../../styles/components/dashprofile.css";

const Profile = () => {
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    name: "Lingam",
    email: "lingam@example.com",
    phone: "9876543210",
    course: "Full Stack Development",
    photo: null,
  });

  const handleChange = (e) => {
    const { name, value, files } = e.target;
    if (name === "photo") {
      setFormData({ ...formData, photo: files[0] });
    } else {
      setFormData({ ...formData, [name]: value });
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!formData.photo) {
      alert("Profile photo is mandatory!");
      return;
    }
    setEditMode(false);
  };

  return (
    <div className="profile">
      <h2 className="profile__title">Student Profile</h2>
      {!editMode ? (
        <div className="profile__card">
          <img
            src={
              formData.photo
                ? URL.createObjectURL(formData.photo)
                : "/images/profile-placeholder.png"
            }
            alt="Profile"
            className="profile__photo"
          />
          <div className="profile__info">
            <p>
              <strong>Name:</strong> {formData.name}
            </p>
            <p>
              <strong>Email:</strong> {formData.email}
            </p>
            <p>
              <strong>Phone:</strong> {formData.phone}
            </p>
            <p>
              <strong>Course:</strong> {formData.course}
            </p>
          </div>
          <button
            className="profile__editBtn"
            onClick={() => setEditMode(true)}
          >
            Edit Profile
          </button>
        </div>
      ) : (
        <form className="profile__form" onSubmit={handleSubmit}>
          <label>
            Profile Photo (required):
            <input
              type="file"
              name="photo"
              accept="image/*"
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Name:
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Email:
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Phone:
            <input
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              required
            />
          </label>
          <label>
            Course:
            <input
              type="text"
              name="course"
              value={formData.course}
              onChange={handleChange}
              required
            />
          </label>
          <div className="profile__actions">
            <button type="submit" className="profile__saveBtn">
              Save
            </button>
            <button
              type="button"
              className="profile__cancelBtn"
              onClick={() => setEditMode(false)}
            >
              Cancel
            </button>
          </div>
        </form>
      )}
    </div>
  );
};

export default Profile;
import React from "react";
import {
  FaHome,
  FaBook,
  FaUser,
  FaTrophy,
  FaCompass,
  FaSignOutAlt,
  FaStar,
} from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import "../../styles/components/Sidebar.css";

const Sidebar = ({
  currentSection,
  onSectionChange,
  isMobile,
  showSidebar,
  setShowSidebar,
  sidebarRef,
}) => {
  const navigate = useNavigate();

  const handleNav = (key) => {
    if (key === "explore") {
      navigate("/explore");
    } else {
      onSectionChange(key);
    }
    if (isMobile) {
      setShowSidebar(false);
    }
  };

  const menuItems = [
    { key: "home", label: "Home", icon: <FaHome /> },
    { key: "courses", label: "My Courses", icon: <FaBook /> },
    { key: "profile", label: "Profile", icon: <FaUser /> },
    { key: "achievements", label: "Achievements", icon: <FaStar /> },
    { key: "explore", label: "Explore Courses", icon: <FaCompass /> },
  ];

  return (
    <aside
      ref={sidebarRef}
      className={`sidebar ${isMobile ? "mobile" : "desktop"} ${
        showSidebar ? "open" : ""
      }`}
    >
      <nav className="sidebar__nav">
        <ul className="sidebar__list">
          {menuItems.map((item) => (
            <li key={item.key} className="sidebar__list-item">
              <button
                className={`sidebar__link ${
                  currentSection === item.key ? "active" : ""
                }`}
                onClick={() => handleNav(item.key)}
              >
                <span className="sidebar__icon">{item.icon}</span>
                <span className="sidebar__label">{item.label}</span>
              </button>
            </li>
          ))}
          <li className="sidebar__list-item sidebar__logout">
            <button
              className="sidebar__link"
              onClick={() => console.log("Logout clicked")}
            >
              <span className="sidebar__icon">
                <FaSignOutAlt />
              </span>
              <span className="sidebar__label">Logout</span>
            </button>
          </li>
        </ul>
      </nav>
    </aside>
  );
};

export default Sidebar;
import React, { useState, useEffect, useRef } from "react";
import {
  FaBars,
  FaTimes,
  FaBell,
  FaSignOutAlt,
  FaUserCircle,
} from "react-icons/fa";
import "../../styles/components/Topbar.css";

const Topbar = ({
  userName,
  onMenuToggle,
  isMobile,
  currentSection,
  onNavigate,
  showSidebar,
}) => {
  const [profileMenuOpen, setProfileMenuOpen] = useState(false);
  const profileRef = useRef(null);

  useEffect(() => {
    const onDocClick = (e) => {
      if (profileRef.current && !profileRef.current.contains(e.target)) {
        setProfileMenuOpen(false);
      }
    };
    document.addEventListener("mousedown", onDocClick);
    return () => document.removeEventListener("mousedown", onDocClick);
  }, []);

  return (
    <header className="topbar">
      <div className="topbar__left">
        {isMobile && (
          <button
            className="topbar__menu-btn"
            onClick={onMenuToggle}
            aria-label="Toggle menu"
          >
            {showSidebar ? <FaTimes /> : <FaBars />}
          </button>
        )}
        <div
          className="topbar__logo-container"
          onClick={() => onNavigate("home")}
        >
          <img
            src="/src/assets/icons/skyinten-violet-vector.svg"
            alt="SkyIntern logo"
            className="topbar__logo-img"
          />
          <span className="topbar__logo-text">SkyIntern</span>
        </div>
      </div>
      <div className="topbar__center">
        <h1 className="topbar__title">
          {currentSection.charAt(0).toUpperCase() + currentSection.slice(1)}
        </h1>
      </div>
      <div className="topbar__right">
        <button className="topbar__notification" aria-label="Notifications">
          <FaBell />
        </button>
        <div className="topbar__profile" ref={profileRef}>
          <button
            className="topbar__avatar-btn"
            onClick={() => setProfileMenuOpen((v) => !v)}
            aria-haspopup="menu"
            aria-expanded={profileMenuOpen}
          >
            <img
              src="/src/assets/images/profile-placeholder.png"
              alt={`${userName} avatar`}
              className="topbar__avatar"
            />
          </button>
          {profileMenuOpen && (
            <div className="topbar__dropdown" role="menu">
              <div className="topbar__user-info-section">
                <FaUserCircle className="topbar__user-icon" />
                <div className="topbar__user-details">
                  <span className="topbar__dropdown-username">{userName}</span>
                  <span className="topbar__dropdown-email">
                    lingam@skyintern.com
                  </span>
                </div>
              </div>
              <button
                className="topbar__dropdown-item logout"
                onClick={() => console.log("Logout clicked")}
              >
                <FaSignOutAlt />
                <span>Logout</span>
              </button>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Topbar;
import React, { useState, useEffect, useRef } from "react";
import "../styles/pages/Dashboard.css";
import Sidebar from "../components/dashboard/Sidebar";
import Topbar from "../components/dashboard/Topbar";
import DashHome from "../components/dashboard/DashHome";
import CourseGrid from "../components/dashboard/CoursesGrid";
import Profile from "../components/dashboard/Profile";
import Accomplishments from "../components/dashboard/Accomplishments";

const Dashboard = () => {
  const [currentSection, setCurrentSection] = useState("home");
  const [isMobile, setIsMobile] = useState(window.innerWidth < 1024);
  const [showSidebar, setShowSidebar] = useState(false);
  const sidebarRef = useRef(null);

  const purchasedCourses = [
    {
      id: 1,
      title: "React Mastery",
      thumbnail: "/images/courses/react.jpg",
      progress: 45,
    },
    {
      id: 2,
      title: "Advanced CSS",
      thumbnail: "/images/courses/css.jpg",
      progress: 100,
    },
    {
      id: 3,
      title: "Node.js API Design",
      thumbnail: "/images/courses/node.jpg",
      progress: 10,
    },
    {
      id: 4,
      title: "Data Structures & Algorithms",
      thumbnail: "/images/courses/dsa.jpg",
      progress: 75,
    },
    {
      id: 5,
      title: "Python for Data Science",
      thumbnail: "/images/courses/python.jpg",
      progress: 30,
    },
    {
      id: 6,
      title: "Cybersecurity Fundamentals",
      thumbnail: "/images/courses/cyber.jpg",
      progress: 0,
    },
  ];

  const hackathon = {
    title: "AI Builders Hackathon",
    date: "Sep 14, 2025",
    time: "10:00 AM IST",
    theme: "Building Assistive Learning Tools",
    teamSize: "1–4",
    prize: "₹50,000",
    banner: "/images/hackathons/ai-builders-banner.jpg",
  };

  useEffect(() => {
    const handleResize = () => {
      const mobile = window.innerWidth < 1024;
      setIsMobile(mobile);
      if (!mobile) {
        setShowSidebar(true);
      } else {
        setShowSidebar(false);
      }
    };
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        isMobile &&
        showSidebar &&
        sidebarRef.current &&
        !sidebarRef.current.contains(event.target)
      ) {
        setShowSidebar(false);
      }
    };
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isMobile, showSidebar]);

  const handleMenuToggle = () => setShowSidebar((prev) => !prev);

  const renderSection = () => {
    switch (currentSection) {
      case "home":
        return (
          <DashHome
            userName="Lingam"
            onNavigate={setCurrentSection}
            purchasedCourses={purchasedCourses}
            hackathon={hackathon}
          />
        );
      case "courses":
        return (
          <CourseGrid
            purchasedCourses={purchasedCourses}
            onNavigate={setCurrentSection}
          />
        );
      case "profile":
        return <Profile />;
      case "achievements":
        return <Accomplishments />;
      default:
        return (
          <DashHome
            userName="Lingam"
            onNavigate={setCurrentSection}
            purchasedCourses={purchasedCourses}
            hackathon={hackathon}
          />
        );
    }
  };

  return (
    <div className="dashboard">
      {isMobile && showSidebar && (
        <div className="overlay" onClick={() => setShowSidebar(false)} />
      )}
      <Sidebar
        sidebarRef={sidebarRef}
        currentSection={currentSection}
        onSectionChange={setCurrentSection}
        isMobile={isMobile}
        showSidebar={showSidebar}
        setShowSidebar={setShowSidebar}
      />
      <div className="dashboard__content">
        <Topbar
          userName="Lingam"
          onMenuToggle={handleMenuToggle}
          isMobile={isMobile}
          currentSection={currentSection}
          onNavigate={setCurrentSection}
          showSidebar={showSidebar}
        />
        <main className="dashboard__main">{renderSection()}</main>
      </div>
    </div>
  );
};

export default Dashboard;
.accomplishments {
  padding: 2rem 0;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.accomplishments__header {
  font-size: 2rem;
  font-weight: 700;
  color: var(--color-text);
  margin-bottom: 0.5rem;
}

.accomplishments__category {
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  padding: 1.5rem;
  box-shadow: var(--shadow-sm);
}

.accomplishments__category-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem 0;
  cursor: pointer;
  transition: opacity 0.2s ease;
}

.accomplishments__category-header h3 {
  font-size: 1.5rem;
  font-weight: 600;
  color: var(--color-text);
}

.accomplishments__toggle-icon {
  font-size: 1.5rem;
  color: var(--color-text-subtle);
  transition: transform 0.3s ease;
}

.accomplishments__toggle-icon.collapsed {
  transform: rotate(0);
}
.accomplishments__toggle-icon.expanded {
  transform: rotate(180deg);
}

.accomplishments__grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
  padding-top: 1.5rem;
}

.achievement-card {
  display: flex;
  align-items: flex-start;
  gap: 1rem;
  background-color: var(--color-background);
  border-radius: var(--radius-md);
  padding: 1.25rem;
  box-shadow: var(--shadow-sm);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.achievement-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-md);
}

.achievement-card__icon {
  font-size: 2rem;
  color: var(--color-primary);
  display: flex;
  align-items: center;
  justify-content: center;
}

.achievement-card__info {
  flex-grow: 1;
}

.achievement-card__title {
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--color-text);
  margin-bottom: 0.25rem;
}

.achievement-card__desc {
  font-size: 0.9rem;
  color: var(--color-text-subtle);
}

.accomplishments__empty {
  text-align: center;
  padding: 3rem;
  font-size: 1.1rem;
  color: var(--color-text-subtle);
  background: var(--color-surface);
  border-radius: var(--radius-lg);
  border: 1px solid var(--color-border);
}
.courses-panel {
  padding: 2rem 0;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.courses-panel__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 1.5rem;
}

.courses-panel__title {
  font-size: 2rem;
  font-weight: 700;
  color: var(--color-text);
}

.courses-panel__search-bar {
  position: relative;
  width: 100%;
  max-width: 400px;
}

.courses-panel__search-bar input {
  width: 100%;
  padding: 12px 16px 12px 40px;
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
  font-size: 1rem;
  background-color: var(--color-surface);
  transition: border-color 0.2s ease;
}

.courses-panel__search-bar input:focus {
  outline: none;
  border-color: var(--color-primary);
}

.courses-panel__search-bar .search-icon {
  position: absolute;
  left: 14px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--color-text-subtle);
  pointer-events: none;
}

.courses-panel__grid {
  display: grid;
  grid-template-rows: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
}

.courses-panel__empty {
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  padding: 3rem;
  text-align: center;
  color: var(--color-text-subtle);
  font-size: 1.1rem;
}

.courses-panel__empty p {
  margin-bottom: 1.5rem;
}

.btn--primary {
  background-color: var(--color-primary);
  color: white;
  padding: 12px 24px;
  border-radius: var(--radius-md);
  font-weight: 600;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.btn--primary:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}
.dash-home {
  padding: 2rem 0;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.dash-home__main {
  display: flex;
  flex-direction: column;
  gap: 2.5rem;
}

.dash-home__greeting-title {
  font-size: 2rem;
  font-weight: 700;
  color: var(--color-text);
  margin-bottom: 0.5rem;
}

.dash-home__greeting-subtitle {
  font-size: 1.1rem;
  color: var(--color-text-subtle);
}

.dash-home__stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
}

.stat-card {
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  padding: 1.5rem;
  display: flex;
  align-items: center;
  gap: 1rem;
  box-shadow: var(--shadow-sm);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-md);
}

.stat-card__icon {
  font-size: 2.5rem;
  color: var(--color-primary);
}

.stat-card__info {
  display: flex;
  flex-direction: column;
}

.stat-card__label {
  font-size: 0.9rem;
  color: var(--color-text-subtle);
  margin-bottom: 0.25rem;
}

.stat-card__value {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--color-text);
}

.dash-home__section {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.section-header__title {
  font-size: 1.75rem;
  font-weight: 700;
  color: var(--color-text);
}

.section-header__link {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  font-weight: 600;
  color: var(--color-primary);
  transition: transform 0.2s ease;
}

.section-header__link:hover {
  transform: translateX(4px);
}

.courses-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
}

.empty-state {
  font-size: 1rem;
  color: var(--color-text-subtle);
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  padding: 2rem;
  text-align: center;
}

.hackathon-card {
  display: flex;
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-lg);
  overflow: hidden;
  box-shadow: var(--shadow-sm);
}

.hackathon-card__media {
  flex-shrink: 0;
  width: 320px;
}

.hackathon-card__image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.hackathon-card__content {
  padding: 2rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.hackathon-card__title {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--color-text);
  margin-bottom: 0.5rem;
}

.hackathon-card__desc {
  color: var(--color-text-subtle);
  margin-bottom: 1rem;
}

.hackathon-card__meta {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem 1.5rem;
  font-size: 0.9rem;
  color: var(--color-text-weak);
  margin-bottom: 1.5rem;
}

.hackathon-card__meta span {
  display: flex;
  align-items: center;
  gap: 6px;
}

.hackathon-card__meta svg {
  color: var(--color-primary);
}

@media (max-width: 1024px) {
  .hackathon-card {
    flex-direction: column;
  }
  .hackathon-card__media {
    width: 100%;
    height: 200px;
  }
}
.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  width: var(--sidebar-width-collapsed);
  background: var(--color-surface);
  border-right: 1px solid var(--color-border);
  box-shadow: var(--shadow-sm);
  display: flex;
  flex-direction: column;
  transition: width 0.3s ease;
  z-index: 1000;
  padding-top: var(--topbar-height);
}

.sidebar:hover {
  width: var(--sidebar-width-expanded);
}

.sidebar.mobile {
  transform: translateX(-100%);
  box-shadow: none;
  width: var(--sidebar-width-expanded);
  transition: transform 0.3s ease;
}

.sidebar.mobile.open {
  transform: translateX(0);
  box-shadow: var(--shadow-md);
}

.sidebar__nav {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  padding: 1rem;
}

.sidebar__list {
  list-style: none;
  padding: 0;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.sidebar__list-item {
  list-style: none;
}

.sidebar__link {
  display: flex;
  align-items: center;
  gap: 1rem;
  width: 100%;
  padding: 0.75rem 1rem;
  border-radius: var(--radius-md);
  font-weight: 500;
  color: var(--color-text-subtle);
  transition: background 0.2s ease, color 0.2s ease;
}

.sidebar__link:hover {
  background: color-mix(in srgb, var(--color-primary) 10%, transparent);
  color: var(--color-primary);
}

.sidebar__link.active {
  background: color-mix(in srgb, var(--color-primary) 15%, transparent);
  color: var(--color-primary-dark);
  font-weight: 600;
}

.sidebar__icon {
  font-size: 1.25rem;
  transition: transform 0.2s ease;
  min-width: 24px;
}

.sidebar__link:hover .sidebar__icon {
  transform: scale(1.1);
}

.sidebar__label {
  white-space: nowrap;
  opacity: 0;
  transform: translateX(-20px);
  transition: opacity 0.3s ease, transform 0.3s ease;
}

.sidebar:hover .sidebar__label {
  opacity: 1;
  transform: translateX(0);
}

.sidebar.mobile.open .sidebar__label {
  opacity: 1;
  transform: translateX(0);
}

.sidebar__logout {
  margin-top: auto;
  padding-top: 1rem;
  border-top: 1px solid var(--color-border);
}

.sidebar__logout .sidebar__link {
  color: var(--color-error);
}

.sidebar__logout .sidebar__link:hover {
  background: color-mix(in srgb, var(--color-error) 10%, transparent);
}
.topbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: var(--topbar-height);
  background: var(--color-surface);
  border-bottom: 1px solid var(--color-border);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 2rem;
  z-index: 1001;
  transition: padding-left 0.3s ease;
}

.topbar__left,
.topbar__right {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

.topbar__center {
  flex-grow: 1;
  display: flex;
  justify-content: center;
}

.topbar__logo-container {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--color-text);
  cursor: pointer;
  transition: transform 0.2s ease;
}

.topbar__logo-container:hover {
  transform: scale(1.05);
}

.topbar__logo-img {
  height: 32px;
  width: 32px;
}

.topbar__logo-text {
  white-space: nowrap;
}

.topbar__title {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--color-text);
  letter-spacing: -0.5px;
  text-align: center;
  margin: 0;
  opacity: 1;
  transition: opacity 0.3s ease;
}

.topbar__menu-btn {
  font-size: 1.2rem;
  padding: 0.5rem;
  border-radius: var(--radius-sm);
  color: var(--color-text-subtle);
  background: transparent;
  transition: color 0.2s ease, transform 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
}

.topbar__menu-btn:hover {
  color: var(--color-primary);
}

.topbar__notification {
  font-size: 1.2rem;
  color: var(--color-text-subtle);
  transition: transform 0.2s ease;
}

.topbar__notification:hover {
  color: var(--color-primary);
  transform: scale(1.1);
}

.topbar__profile {
  position: relative;
  display: flex;
  align-items: center;
}

.topbar__avatar-btn {
  border: 2px solid transparent;
  border-radius: 50%;
  transition: border-color 0.2s ease;
  width: 40px;
  height: 40px;
}

.topbar__avatar-btn:hover {
  border-color: var(--color-primary);
}

.topbar__avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

.topbar__dropdown {
  position: absolute;
  top: 100%;
  right: 0;
  margin-top: 1rem;
  background: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-md);
  overflow: hidden;
  animation: fadeIn 0.3s ease-out;
  min-width: 200px;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.topbar__user-info-section {
  display: flex;
  align-items: center;
  gap: 10px;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--color-border);
}

.topbar__user-icon {
  font-size: 2.5rem;
  color: var(--color-primary);
}

.topbar__user-details {
  display: flex;
  flex-direction: column;
}

.topbar__dropdown-username {
  font-weight: 600;
  color: var(--color-text);
}

.topbar__dropdown-email {
  font-size: 0.8rem;
  color: var(--color-text-subtle);
}

.topbar__dropdown-item {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 0.75rem 1rem;
  font-size: 0.95rem;
  font-weight: 500;
  color: var(--color-text-subtle);
  border-radius: var(--radius-sm);
  transition: background 0.2s ease, color 0.2s ease;
}

.topbar__dropdown-item:hover {
  background: var(--color-background);
  color: var(--color-text);
}

.topbar__dropdown-item.logout {
  color: var(--color-error);
}

.topbar__dropdown-item.logout:hover {
  background: color-mix(in srgb, var(--color-error) 10%, transparent);
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-10px); }
  to { opacity: 1; transform: translateY(0); }
}

@media (max-width: 1024px) {
  .topbar {
    padding: 0 1rem;
    left: 0;
  }
  .topbar__title {
    font-size: 1.25rem;
  }
  .topbar__logo-container {
    font-size: 1.25rem;
    gap: 0.5rem;
  }
  .topbar__logo-text {
    display: none;
  }
}
:root {
  --sidebar-width-expanded: 250px;
  --sidebar-width-collapsed: 80px;
  --topbar-height: 70px;
}

.dashboard {
  display: flex;
  background-color: var(--color-background);
  min-height: 100vh;
}

.dashboard__content {
  flex-grow: 1;
  padding-left: var(--sidebar-width-collapsed);
  display: flex;
  flex-direction: column;
  transition: padding-left 0.3s ease;
}

.dashboard__main {
  flex-grow: 1;
  padding: var(--topbar-height) 2rem 0;
  max-width: 1200px;
  margin: 0 auto;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.4);
  z-index: 999;
}

@media (max-width: 1024px) {
  .dashboard__content {
    padding-left: 0;
  }
}
